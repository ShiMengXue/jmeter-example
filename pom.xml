<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <artifactId>jmeter-example</artifactId>
    <groupId>com.lazerycode.jmeter</groupId>
    <version>1.0</version>
    <packaging>pom</packaging>

    <properties>
        <test.threads>1</test.threads>
        <test.loops>1</test.loops>
        <webservice.host>localhost</webservice.host>
        <webservice.port>3000</webservice.port>
    </properties>

    <build>
        <plugins>
            <!-- execute JMeter test -->
            <plugin>
                <groupId>com.lazerycode.jmeter</groupId>
                <artifactId>jmeter-maven-plugin</artifactId>
                <version>1.9.0</version>
                <!-- configure different executions of the plugin  -->
                <executions>
                    <execution>
                        <!--
                          1) Performance test
                        -->
                        <id>test</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>jmeter</goal>
                        </goals>
                    </execution>
                </executions>

                <!-- general configuration for all executions -->

                <configuration>
                    <propertiesUser>
                        <HTTPSampler.domain>${webservice.host}</HTTPSampler.domain>
                        <HTTPSampler.port>${webservice.port}</HTTPSampler.port>
                        <threadcount>${test.threads}</threadcount>
                        <loopcount>${test.loops}</loopcount>
                    </propertiesUser>
                    <!--
                       By default the test results are saved in a file
                       /target/jmeter/results/<testname>-<timestamp>.jtl
                       Further processing is easier without timestamp though.
                    -->
                    <testResultsTimestamp>false</testResultsTimestamp>

                    <!--
                       To simplify debugging, it is advisable to adapt the loglevel.
                       The jmeter logs are written to the file jmeter.log.
                    -->
                    <overrideRootLogLevel>DEBUG</overrideRootLogLevel>

                    <!--
                       By default, the console output during a jmeter test run is suppressed.
                       We want to display the progress using the listener "Generate Summary Results"
                       (which periodically prints stats to stdout). Therefore we have to make sure,
                       that the jmeter output is not suppressed.
                    -->
                    <suppressJMeterOutput>false</suppressJMeterOutput>

                    <!--
                       If tests fail (e.g. a http-request running into a timeout), the corresponding maven
                       goal also fails (and subsequent goals aren't executed anymore). We want to create graphs
                       from test-results, no matter if some requests failed or not, so we ignore jmeter failures.
                    -->
                    <ignoreResultFailures>true</ignoreResultFailures>
                    <jmeterPlugins>
                        <plugin>
                            <groupId>kg.apc</groupId>
                            <artifactId>jmeter-plugins-common</artifactId>
                        </plugin>
                        <plugin>
                            <groupId>kg.apc</groupId>
                            <artifactId>jmeter-plugins-standard</artifactId>
                        </plugin>
                        <plugin>
                            <groupId>kg.apc</groupId>
                            <artifactId>jmeter-plugins-extras</artifactId>
                        </plugin>
                        <plugin>
                            <groupId>kg.apc</groupId>
                            <artifactId>jmeter-plugins-extras-libs</artifactId>
                        </plugin>
                        <plugin>
                            <groupId>kg.apc</groupId>
                            <artifactId>jmeter-plugins</artifactId>
                        </plugin>
                        <plugin>
                            <groupId>kg.apc</groupId>
                            <artifactId>jmeter-plugins-webdriver</artifactId>
                        </plugin>
                    </jmeterPlugins>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>kg.apc</groupId>
                        <artifactId>jmeter-plugins-common</artifactId>
                        <version>1.3.1</version>
                    </dependency>
                    <dependency>
                        <groupId>kg.apc</groupId>
                        <artifactId>jmeter-plugins-standard</artifactId>
                        <version>1.3.1</version>
                    </dependency>
                    <dependency>
                        <groupId>kg.apc</groupId>
                        <artifactId>jmeter-plugins-extras</artifactId>
                        <version>1.3.1</version>
                    </dependency>
                    <dependency>
                        <groupId>kg.apc</groupId>
                        <artifactId>jmeter-plugins-extras-libs</artifactId>
                        <version>1.3.1</version>
                    </dependency>
                    <dependency>
                        <groupId>kg.apc</groupId>
                        <artifactId>jmeter-plugins</artifactId>
                        <version>1.0.0</version>
                    </dependency>
                    <dependency>
                        <groupId>kg.apc</groupId>
                        <artifactId>jmeter-plugins-webdriver</artifactId>
                        <version>1.3.1</version>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.jmeter</groupId>
                        <artifactId>ApacheJMeter_core</artifactId>
                        <version>3.1</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <groupId>com.lazerycode.jmeter</groupId>
                <artifactId>jmeter-analysis-maven-plugin</artifactId>
                <version>1.0.6</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>analyze</goal>
                        </goals>
                        <phase>post-integration-test</phase>
                    </execution>
                </executions>
                <configuration>
                    <!--
                    source file that contains jmeter result data. Needs to be XML format or a GZIPed XML format
                    -->
                    <source>${project.build.directory}/jmeter/results/*</source>

                    <!--
                    directory where to store analysis report files. At least a file "summary.txt" will be stored here.
                    -->
                    <targetDirectory>${project.build.directory}/reports</targetDirectory>

                    <!--
                    Defines groups of requests by URL patterns,
                    e.g. URIs starting with /mock/page are associated with group "pages". All analysis results are
                    If there is no such mapping then the threadgroups from the jmeter.xml are used.
                    -->
                    <!--<requestGroups>-->
                    <!--<test>/en-US/firefox/**</test>-->
                    <!--</requestGroups>-->

                    <!--
                    Mapping from resource URL to file name. Every resource will be downloaded and stored in 'targetDirectory'
                    with the given filename. Tokens "_FROM_" and "_TO_" can be used as placeholders. These placeholders will
                    be replaced by timestamps of execution interval (formatted as ISO8601, e.g. '20111216T145509+0100').
                    -->
                    <!--<remoteResources>-->
                    <!--<property>-->
                    <!--<name>http://yourhost/path?from=_FROM_&amp;to=_TO_</name>-->
                    <!--<value>my_resource.txt</value>-->
                    <!--</property>-->
                    <!--</remoteResources>-->
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>